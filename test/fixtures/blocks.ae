(
    var a = 1
    var b = a * 2
    b - a
)

// TODO:
// * list literal
// * array type parsing
// * subscript syntax
// * slice syntax

var a, b, c int

// // Which one to choose?
// var a, b, c = 3, 4, "foo"
// var a, b, c int = 3, 4, 5 // unlikely
// a, b, c = 1, 2, 3       // combined assignment (is it possible for bare commas to imply a tuple???
// {a, b, c} = {1, 2, 3}   // pattern matching

var e, d string
var x:int = 1,
    y = 2,
    z:uint

some_func(a b c 1 2)
other_func(a+b, 2*b, "c")

a = if this_is_true (
    true(value)
) else (
    false()
)

if (a ≤ b) 4 * 5 else -4

var f = fn(x y z) x + y + z
f = fn() (x + y + z)

f = fn ➀ + ➁ + ➂
f = fn ➀ + ➁*➁ + ➂
f = fn (➀ + ➁*➁) + 3
f = (fn ➀ + ➁*➁) + 3
f = fn ➀
f = fn 1

〖➀ + ➁*➁〗+ 3
f = 〖➀ + ➁*➁〗+ 3

//if a ≤ b (4 * 5) else -4
//
//if a ≤ b (4 * 5) else (-4)
//
//if a ≤ b then 4 * 5 else -4
//
//a ≤ b ? 4 * 5 : -4
//
//(a ≤ b ? 4 * 5 : -4)
//
//if a ≤ b ( 4 * 5 )
//
//if a ≤ b ( 4 * 5 : -4 )
//
//
//var x = (5 if y < 0) || 1
//
//var x = y < 0 and 5 or 1
//
//var x = y < 0 then 5 else 1          // +1
//
//var x = y < 0 ? 5 : 1                  // +1
//
//var x = (y < 0) ? 5 , 1
//
//var x = if (y < 0) 5 else 1          // + 1
//
//
//if (a ≤ b) (
//    4 * 5
//) else -4
//
//if (a ≤ b) (
//    4 * 5
//) else (
//    -4
//)
//
//if a ≤ b then
//    4 * 5
//else
//    -4
//end
//
//
//// Prefinal if
//if a ≤ b (
//    4 * 5
//)
//
//// With else
//if a ≤ b (
//    4 * 5
//) else (
//    -4
//)
//
//// One-liner
//if (a ≤ b) 4 * 5   // should not be possible
//if (a ≤ b) 4 * 5 else -4
//if a ≤ b (4 * 5) else (-4)
//if a ≤ b (4 * 5 : -4)
//(a ≤ b ? 4 * 5 : -4)

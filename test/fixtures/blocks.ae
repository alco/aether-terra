// TODO:
// * typechecking for number types
// * support for string type in runtime
// * support for array/slice type
// * for-loop
// * range syntax
// * slicing arrays
// ** type inference

// Configurable stages (facade pattern):
// * function specialization (in: AST, out: transformed AST)
// * code generation (in: AST, out: terra code)
// * evaluation (run terra code)

(
    var a = 1
    var b = a * 2
    b - a
)

var a, b, c int

// // Which one to choose?
// var a, b, c = 3, 4, "foo"
// var a, b, c int = 3, 4, 5 // unlikely
// a, b, c = 1, 2, 3       // combined assignment (is it possible for bare commas to imply a tuple???
// {a, b, c} = {1, 2, 3}   // pattern matching

var e, d string
var x:int = 1,
    y = 2,
    z:uint

var array = [a b c]
array = [1, 2+3, 4]
var ar [1][2][3]int
var ar: []string = ["a" "b" "c" "d"]

some_func(a b c 1 2)
other_func(a+b, 2*b, "c")

a = if this_is_true (
    true(value)
) else (
    false()
)

if (a ≤ b) 4 * 5 else -4

var f = fn(x y z) x + y + z
f = fn() (x + y + z)

f = fn ➀ + ➁ + ➂
f = fn ➀ + ➁*➁ + ➂
f = fn (➀ + ➁*➁) + 3
f = (fn ➀ + ➁*➁) + 3
f = fn ➀
f = fn 1

〖➀ + ➁*➁〗+ 3
f = 〖➀ + ➁*➁〗+ 3

a = if x == 1 (
    1
    2
) else if x == 2 (
    3
    4
) else if c ≥ 4 (
    5
    6
)

fn(bytes) (
    var MODULO = 65521
    var a = 1, b = 0
    for var byte in bytes (
        a = (a + byte) mod MODULO
        b = (b + a) mod MODULO
    )
    (b << 16) bor a
)


//if a ≤ b (4 * 5) else -4
//
//if a ≤ b (4 * 5) else (-4)
//
//if a ≤ b then 4 * 5 else -4
//
//a ≤ b ? 4 * 5 : -4
//
//(a ≤ b ? 4 * 5 : -4)
//
//if a ≤ b ( 4 * 5 )
//
//if a ≤ b ( 4 * 5 : -4 )
//
//
//var x = (5 if y < 0) || 1
//
//var x = y < 0 and 5 or 1
//
//var x = y < 0 then 5 else 1          // +1
//
//var x = y < 0 ? 5 : 1                  // +1
//
//var x = (y < 0) ? 5 , 1
//
//var x = if (y < 0) 5 else 1          // + 1
//
//
//if (a ≤ b) (
//    4 * 5
//) else -4
//
//if (a ≤ b) (
//    4 * 5
//) else (
//    -4
//)
//
//if a ≤ b then
//    4 * 5
//else
//    -4
//end
//
//
//// Prefinal if
//if a ≤ b (
//    4 * 5
//)
//
//// With else
//if a ≤ b (
//    4 * 5
//) else (
//    -4
//)
//
//// One-liner
//if (a ≤ b) 4 * 5   // should not be possible
//if (a ≤ b) 4 * 5 else -4
//if a ≤ b (4 * 5) else (-4)
//if a ≤ b (4 * 5 : -4)
//(a ≤ b ? 4 * 5 : -4)
